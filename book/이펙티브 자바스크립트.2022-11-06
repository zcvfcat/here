1장 자바스크립트에 익숙해지기
  1 어떤 자바스크립트를 사용하고 있는지 알아야 한다
    js는 ecmascript 표준 시스템(esm)과 다양한 시스템(commonjs, amd)과 양립하고 있음
    다양한 클라이언트(웹브라우저), 서버 측 프로그램을 통합해야할 필요성이 있음
      - 비표준 배제 (방법 처음 스크립트 실행시 "use strict") - 스트릭트 모드 활성화
      - 스트릭트 모드, 일반 모드 병합하면 안됨
    `어떤 환경이든 동일한 동작을 하도록 코드 작성`

  2 자바스크립트의 부동 소수점 숫자 이해하기
    number 객체 IEEE 754 구현
    toString(2) 이진수 변환, parseInt("1001",2) 이진수 검증
    부동 소수점(float point = .) 연산의 문제점이 명확
    0.1 + 0.2 부동 소수점 문제를 정수로 변환해서 처리

  3 암묵적인 형변환을 주의하라
    정확한 타입으로 형변환 하자
    +"1" -> Number("1") 단일 연산자로 형변환 하지마라, isNaN 정상적인 리턴값 기대하기 힘듬
    falsy truthy 쓰지말자

  4 객체 래퍼보다 원시 데이터형을 우선시하라
    js는 boolean, number, string, null, undefined 만 원시형 나머진 객체
    new String(x) 쓰지말고 String(x) 써라

    원시 데이터형을 위한 객체 래퍼는 원시형 데이터와 다르다

  5 혼합된 데이터형을 ==로 비교하지 마라
    == 서로 다른 데이터일 경우 `강제 형변환` 후 비교
    ===, !== 데이터 형 비교, 값 비교 쓰자

    명시적으로 프로그램의 동작을 적자 - 신뢰성

  6 세미콜론 삽입의 한계에 대해서 알아두자
    세미콜론(;)은 파싱단계에서 자동적으로 넣어줌
    반복문 조건절에는 자동적으로 삽입 안됨

    스크립트 병합시 스크립트 사이에 세미콜론 삽입(;) <- 코드 방어

  7 문자열을 16비트 코드 단위의 시퀀스로 간주하라
    문자열이 유니코드 포인트가 아닌 16비트 코드 유닛으로 구성
    문자열 위치, 길이 문자열 조작하기등은 라이브러리(encodeURIComponent, encodeURI ...) 사용하자

2장 변수 스코프
  8 전역 객체의 사용을 최소화하라
    다른 곳에서 사용 될 수 있음을 인지
    모듈을 응집도를 높이기 위해 제거하라
    대신 환경변수를 사용하자

  9 항상 지역 변수를 선언하라 - 구식
  지역변수 let, const 쓰자

  10 with를 사용하지 마라 - 당연히 쓰면 안됨
  어느 위치에서든 객체의 기능 재선언 - 신뢰성

  11 클로저에 익숙해져라
    함수 호출시 자신의 위치를 기억하고 있음
    외부 스코프에 선언된 변수 참조 가능

  12 변수 호이스팅에 대해 이해하라
    for (var ... 변수들 재선언되니까 var 변수 쓰지말자
    굳이 쓴다면 직접 호이스팅 (스코프 맨 위에 선언)
    지역변수 let, const 쓰자

  13 지역 변수 스코프를 만들기 위해 즉시 실행 함수 표현식을 사용하라
    지역변수 let, const 쓰자

  14 기명 함수 표현식의 스코프에 주의하라
    var 그냥 쓰지말자

  15 블록-지역 함수 선언문의 스코프에 주의하라
    내부 선언된 함수가 실행환경에 따라 다르게 동작 할 수 있으므로 외부에 선언

  16 eval을 이용해 지역 변수를 생성하지 마라
    문자열로 외부에서 실행되므로 사용하지마라
    xss와 사용방법과 비슷

  17 직접적인 eval보다 간접적인 eval을 사용하라
    이 단원 그냥 보지마라
    알면 안되는 것들임

3장 함수 사용하기
  19 함수, 메서드, 생성자 호출의 차이를 이해하라
    
  20 고차 함수에 익숙해져라
  21 지정된 수신자 객체로 함수를 호출하기 위해 call 메서드를 사용하라
  22 다른 개수의 인자로 함수를 호출하기 위해 apply를 사용하라
  23 가변 인자 함수를 생성하기 위해 arguments를 사용하라
  24 절대 arguments 객체를 수정하지 마라
  25 자바스크립트의 부동 소수점 숫자 이해하기
  26 고정된 수신자 객체로 메서드를 추출하기 위해 bind를 사용하라
  27 커링 함수에 bind를 사용하라
  28 코드를 캡슐화하기 위해 문자열보다 클로저를 사용하라
  29 함수의 toString 메서드에 의존하지 마라
  30 비표준 스택 검사 프로퍼티를 사용하지 마라

4장 객체와 프로토타입
  31 __proto__보다 Object.getPrototypeOf를 사용하라
  32 __proto__를 절대 수정하지 마라
  33 생성자가 new와 관계 없이 동작하게 만들어라
  34 메서드를 프로토타입에 저장하라
  35 비공개 데이터를 저장하기 위해 클로저를 사용하라
  36 인스턴스의 상태는 인스턴스 객체에만 저장하라
  37 this의 명시적인 바인딩에 대해 이해하라
  38 서브 클래스 생성자에서 수퍼 클래스 생성자를 호출하라
  39 수퍼 클래스 프로퍼티 이름을 절대 재사용하지 마라
  40 표준 클래스를 상속하지 마라
  41 프로토타입을 세부 구현 사항처럼 처리하라
  42 무모한 몽키 패칭을 하지 마라

5장 배열과 딕셔너리
  43 직접적인 객체의 인스턴스로 가벼운 딕셔너리를 만들어라
  44 프로토타입 오염을 막기 위해 null 프로토타입을 사용하라
  45 프로토타입 오염을 막기 위해 asOwnProperty를 사용하라
  46 순서가 정해진 컬렉션에는 딕셔너리 대신 배열을 사용하라
  47 Object.prototype에 열거 가능한 프로퍼티를 절대 추가하지 마라
  48 열거하는 동안 객체를 수정하지 마라
  49 배열을 반복할 때 for...in 대신 for 반복문을 사용하라
  50 반복문 대신 반복 메서드를 사용하라
  51 유사 배열 객체에 범용적인 배열 메서드를 재사용하라
  52 Array 생성자 대신 배열 리터럴을 사용하라

6장 라이브러리와 API 설계
  53 일관된 컨벤션을 유지하라
  54 undefined를 ‘값 이 없는’ 것처럼 처리하라
  55 키워드 인자를 위해 옵션 객체를 받아들여라
  56 불필요한 상태 유지를 피하라
  57 유연한 인터페이스를 위해 구조화된 형식을 사용하라
  58 배열과 유사 배열 객체를 구별하라
  59 과도한 강제 형변환을 피하라
  60 메서드 체이닝을 지원하라

7장 동시성
  61 이벤트 큐를 I/O에 블로킹시키지 마라
  62 비동기 시퀀스를 위해 감싸지거나 이름이 지정된 콜백을 사용하라
  63 오류를 놓치지 않도록 조심하라
  64 비동기적인 반복문을 위해 재귀를 사용하라
  65 계산 중 이벤트 큐를 블로킹하지 마라
  66 동시성 연산을 수행하기 위해 카운터를 사용하라
  67 비동기 콜백을 절대 동기적으로 호출하지 마라
  68 더 깔끔한 비동기 로직을 위해 promise를 사용하라

- 쉬움 지수 - 0 > 뇌 비우고 봐도 됨
- 메모리 지수 - 5 > 휘발성 그렇게 강하지 않음
- 다회독 지수 - 8 > 주력 js 언어 책을 봐도 되지만 너무 오래됨...